class Natural
types
public 
    Nat = <S> * Nat | <O>;

operations
public
    plusZero : Nat ==> Nat
    plusZero (n) == return plusN(n, <O>)
    post 
        RESULT = n;

functions
public
    succ : (Nat) -> Nat
    succ (n) ==
        mk_(<S>, n); 
        
public
    plusN : Nat * Nat -> Nat
    plusN (a, b) ==
        cases b: 
            <O> -> a,
            mk_(<S>, b') -> plusN(succ(a), b')
        end;
public        
    toInt : (Nat) -> int
    toInt (n) ==
        cases n:
            <O> -> 0,
            mk_(<S>, n') -> 1 + (toInt(n'))
        end;

traces
T0: let n = new Natural() in n.plusZero(mk_(<S>, mk_(<S>, <O>)));

end Natural
